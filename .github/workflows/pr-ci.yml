name: PR to Branch CI

on:
  pull_request:
    branches:
      - add_secondary_dataplane_driver

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      # fail-fast: false
      matrix:
        docker_image:
          - [node, node, calico-forked]
          - [cni-plugin, cni, calico-cni-plugin-forked]

    env:
      TARGETARCH: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image variables
        run: |
          REPO="${{ github.repository }}"
          GIT_COMMIT_HASH_SHORT=$(git rev-parse --short ${{ github.sha }})
          CURRENT_DATE=$(date +'%y%m%d')
          PR_NUMBER="pr-${{ github.event.number }}"
          echo "ARTIFACT_VERSION=${CURRENT_DATE}.${PR_NUMBER}.${GIT_COMMIT_HASH_SHORT}" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "IMAGE_NAME=ghcr.io/${REPO%/*}/${{ matrix.docker_image[2] }}" >> $GITHUB_ENV
          echo "REPO_OWNER=${REPO%/*}" >> $GITHUB_ENV
          echo "REPO_NAME=${REPO#*/}" >> $GITHUB_ENV

      - name: Print artifact version
        run: echo "Artifact version is ${{ env.ARTIFACT_VERSION }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      - name: Build Docker image
        run: |
          make -C ${{ matrix.docker_image[0] }} image ARCH=${{ env.TARGETARCH }}

      - name: Tag Docker image
        run: |
          docker tag ${{ matrix.docker_image[1] }}:latest-${{ env.TARGETARCH }} ${{ env.IMAGE_NAME }}:${{ env.ARTIFACT_VERSION }}

      - name: Security Scan
        id: trivy-scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.ARTIFACT_VERSION }}
          output: 'scan-report.txt'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'
        env:
          TRIVY_PLATFORM: linux/${{ env.TARGETARCH }}

      - name: Publish Trivy Output to Summary
        if: always()
        run: |
          if [[ -s scan-report.txt ]]; then
            {
              echo "<h2>Security Output</h2>"
              if [[ "${{ steps.trivy-scan.outcome }}" != "success" ]]; then
                echo "<details><summary>:x: <strong>Issues found.</strong> Click to expand...</summary>"
              else
                echo "<details><summary>:information_source: Click to expand...</summary>"
              fi
              echo ""
              echo '```'
              cat scan-report.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.ARTIFACT_VERSION }}

      - name: Delete old existing images with PR tag except for the latest one
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSIONS_PATH="/orgs/${{ env.REPO_OWNER }}/packages/container/${{ matrix.docker_image[2] }}/versions"
          RESPONSE=$(gh api --method GET -H "Accept: application/vnd.github.v3+json" $VERSIONS_PATH 2>/dev/null)

          if [ $? -ne 0 ] || [ -z "$RESPONSE" ]; then
            echo "Package not found. Skipping deletion."
            exit 0
          fi

          VERSION_COUNT=$(echo "$RESPONSE" | jq '. | length')

          if [ "$VERSION_COUNT" -le 1 ]; then
            echo "Package contains only one version. Skipping deletion."
            exit 0
          fi

          IMAGES_TO_DELETE=$(echo "$RESPONSE" | jq -r '.[] | select(.metadata.container.tags[] | contains("'${{ env.PR_NUMBER }}'")) | select(.metadata.container.tags[] != "'${{ env.ARTIFACT_VERSION }}'") | .id')

          if [[ -n "$IMAGES_TO_DELETE" ]]; then
            for image_id in $IMAGES_TO_DELETE; do
              gh api --method DELETE -H "Accept: application/vnd.github.v3+json" ${VERSIONS_PATH}/${image_id}
            done
          else
            echo "No older images found with PR tag."
          fi